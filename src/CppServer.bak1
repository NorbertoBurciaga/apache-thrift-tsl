/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#include <boost/filesystem.hpp>

#include <thrift/server/TNonblockingServer.h>
#include <thrift/transport/TSSLSocket.h>
#include <thrift/transport/TNonblockingSSLServerSocket.h>

#include <iostream>
#include <event.h>

#include "../gen-cpp/Calculator.h"

using namespace std;
using namespace apache::thrift;
using namespace apache::thrift::server;

using apache::thrift::concurrency::Guard;
using apache::thrift::concurrency::Monitor;
using apache::thrift::concurrency::Mutex;
using apache::thrift::transport::TSSLSocketFactory;
using apache::thrift::transport::TSSLSocket;
using apache::thrift::server::TServerEventHandler;

using namespace tutorial;
using namespace shared;

class CalculatorHandler : public CalculatorIf {
public:
  CalculatorHandler() {}

  void ping() { cout << "ping()" << endl; }

  int32_t add(const int32_t n1, const int32_t n2) {
    cout << "add(" << n1 << ", " << n2 << ")" << endl;
    return n1 + n2;
  }

  int32_t calculate(const int32_t logid, const Work& work) {
    cout << "calculate(" << logid << ", " << work << ")" << endl;
    int32_t val;

    switch (work.op) {
    case Operation::ADD:
      val = work.num1 + work.num2;
      break;
    case Operation::SUBTRACT:
      val = work.num1 - work.num2;
      break;
    case Operation::MULTIPLY:
      val = work.num1 * work.num2;
      break;
    case Operation::DIVIDE:
      if (work.num2 == 0) {
        InvalidOperation io;
        io.whatOp = work.op;
        io.why = "Cannot divide by 0";
        throw io;
      }
      val = work.num1 / work.num2;
      break;
    default:
      InvalidOperation io;
      io.whatOp = work.op;
      io.why = "Invalid Operation";
      throw io;
    }

    SharedStruct ss;
    ss.key = logid;
    ss.value = to_string(val);

    log[logid] = ss;

    return val;
  }

  void getStruct(SharedStruct& ret, const int32_t logid) {
    cout << "getStruct(" << logid << ")" << endl;
    ret = log[logid];
  }

  void zip() { cout << "zip()" << endl; }

protected:
  map<int32_t, SharedStruct> log;
};

/*
  CalculatorIfFactory is code generated.
  CalculatorCloneFactory is useful for getting access to the server side of the
  transport.  It is also useful for making per-connection state.  Without this
  CloneFactory, all connections will end up sharing the same handler instance.
*/
class CalculatorCloneFactory : virtual public CalculatorIfFactory {
 public:
  virtual ~CalculatorCloneFactory() {}
  virtual CalculatorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo)
  {
    stdcxx::shared_ptr<TSSLSocket> sock = stdcxx::dynamic_pointer_cast<TSSLSocket>(connInfo.transport);
    cout << "Incoming connection\n";
    cout << "\tSocketInfo: "  << sock->getSocketInfo() << "\n";
    cout << "\tPeerHost: "    << sock->getPeerHost() << "\n";
    cout << "\tPeerAddress: " << sock->getPeerAddress() << "\n";
    cout << "\tPeerPort: "    << sock->getPeerPort() << "\n";
    return new CalculatorHandler;
  }
  virtual void releaseHandler( ::shared::SharedServiceIf* handler) {
    delete handler;
  }
};


boost::filesystem::path keyDir;
stdcxx::shared_ptr<event_base> userEventBase_;
stdcxx::shared_ptr<CalculatorProcessorFactory> processor;
stdcxx::shared_ptr<apache::thrift::concurrency::Thread> thread;
stdcxx::shared_ptr<apache::thrift::server::TNonblockingServer> server;

boost::filesystem::path certFile(const std::string& filename) {
  return keyDir / filename;
}

stdcxx::shared_ptr<TSSLSocketFactory> createServerSocketFactory() {
  stdcxx::shared_ptr<TSSLSocketFactory> pServerSocketFactory;

  pServerSocketFactory.reset(new TSSLSocketFactory());
  pServerSocketFactory->ciphers("ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH");
  pServerSocketFactory->loadCertificate(certFile("norbers.crt").string().c_str());
  pServerSocketFactory->loadPrivateKey(certFile("norbers.key").string().c_str());
  pServerSocketFactory->server(true);
  return pServerSocketFactory;
}

class ListenEventHandler : public TServerEventHandler {
  public:
    ListenEventHandler(Mutex* mutex) : listenMonitor_(mutex), ready_(false) {}

    void preServe() /* override */ {
      Guard g(listenMonitor_.mutex());
      ready_ = true;
      listenMonitor_.notify();
    }

    Monitor listenMonitor_;
    bool ready_;
};

class Runner : public apache::thrift::concurrency::Runnable {
  public:
    int port;
    stdcxx::shared_ptr<event_base> userEventBase;
    stdcxx::shared_ptr<TProcessor> processor;
    stdcxx::shared_ptr<server::TNonblockingServer> server;
    stdcxx::shared_ptr<ListenEventHandler> listenHandler;
    stdcxx::shared_ptr<TSSLSocketFactory> pServerSocketFactory;
    stdcxx::shared_ptr<transport::TNonblockingSSLServerSocket> socket;
    Mutex mutex_;

    Runner() {
      listenHandler.reset(new ListenEventHandler(&mutex_));
    }

    virtual void run() {
      // When binding to explicit port, allow retrying to workaround bind failures on ports in use
      int retryCount = port ? 10 : 0;
      pServerSocketFactory = createServerSocketFactory();  
      startServer(retryCount);
    }

    void readyBarrier() {
      // block until server is listening and ready to accept connections
      Guard g(mutex_);
      while (!listenHandler->ready_) {
        listenHandler->listenMonitor_.wait();
      }
    }
  private:
    void startServer(int retry_count) {
      try {
        socket.reset(new transport::TNonblockingSSLServerSocket(port, pServerSocketFactory));
        server.reset(new server::TNonblockingServer(processor, socket));
	      server->setServerEventHandler(listenHandler);
        server->setNumIOThreads(1);
        if (userEventBase) {
          server->registerEvents(userEventBase.get());
        }
        server->serve();
      } catch (const transport::TTransportException&) {
        if (retry_count > 0) {
          ++port;
          startServer(retry_count - 1);
        } else {
          throw;
        }
      }
    }
};

class EventDeleter {
  public:
    void operator()(event_base* p) { event_base_free(p); }
};

void setEventBase(event_base* user_event_base) {
  userEventBase_.reset(user_event_base, EventDeleter());
}

int startServer(int port) {
  stdcxx::shared_ptr<Runner> runner(new Runner);
  runner->port = port;
  runner->processor = processor;
  runner->userEventBase = userEventBase_;

  apache::thrift::stdcxx::scoped_ptr<apache::thrift::concurrency::ThreadFactory> threadFactory(
      new apache::thrift::concurrency::PlatformThreadFactory(
#if !USE_BOOST_THREAD && !USE_STD_THREAD
        concurrency::PlatformThreadFactory::OTHER, concurrency::PlatformThreadFactory::NORMAL,
        1,
#endif
        false));
  thread = threadFactory->newThread(runner);
  thread->start();
  runner->readyBarrier();

  server = runner->server;
  return runner->port;
}

int main() {

#ifdef __linux__
  // OpenSSL calls send() without MSG_NOSIGPIPE so writing to a socket that has
  // disconnected can cause a SIGPIPE signal...
  signal(SIGPIPE, SIG_IGN);
#endif

  TSSLSocketFactory::setManualOpenSSLInitialization(true);
  apache::thrift::transport::initializeOpenSSL();

  keyDir = boost::filesystem::current_path().parent_path().parent_path() / "keys";
  if (!boost::filesystem::exists(certFile("norbers.crt"))) {
    throw std::invalid_argument("Certificate norbers.crt was not found");
  }


/*  TThreadedServer server(
    stdcxx::make_shared<CalculatorProcessorFactory>(stdcxx::make_shared<CalculatorCloneFactory>()),
    stdcxx::make_shared<TServerSocket>(9090), //port
    stdcxx::make_shared<TBufferedTransportFactory>(),
    stdcxx::make_shared<TBinaryProtocolFactory>());
*/
  /*
  // if you don't need per-connection state, do the following instead
  TThreadedServer server(
    stdcxx::make_shared<CalculatorProcessor>(stdcxx::make_shared<CalculatorHandler>()),
    stdcxx::make_shared<TServerSocket>(9090), //port
    stdcxx::make_shared<TBufferedTransportFactory>(),
    stdcxx::make_shared<TBinaryProtocolFactory>());
  */

  /**
   * Here are some alternate server types...

  // This server only allows one connection at a time, but spawns no threads
  TSimpleServer server(
    stdcxx::make_shared<CalculatorProcessor>(stdcxx::make_shared<CalculatorHandler>()),
    stdcxx::make_shared<TServerSocket>(9090),
    stdcxx::make_shared<TBufferedTransportFactory>(),
    stdcxx::make_shared<TBinaryProtocolFactory>());

  const int workerCount = 4;

  stdcxx::shared_ptr<ThreadManager> threadManager =
    ThreadManager::newSimpleThreadManager(workerCount);
  threadManager->threadFactory(
    stdcxx::make_shared<PlatformThreadFactory>());
  threadManager->start();

  // This server allows "workerCount" connection at a time, and reuses threads
  TThreadPoolServer server(
    stdcxx::make_shared<CalculatorProcessorFactory>(stdcxx::make_shared<CalculatorCloneFactory>()),
    stdcxx::make_shared<TServerSocket>(9090),
    stdcxx::make_shared<TBufferedTransportFactory>(),
    stdcxx::make_shared<TBinaryProtocolFactory>(),
    threadManager);
  */

  cout << "Starting the server..." << endl;
//  server.serve();
  cout << "Done." << endl;
  return 0;
}
